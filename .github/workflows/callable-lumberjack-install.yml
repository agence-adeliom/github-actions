name: Install project libs and compile

on:
    workflow_call:
        inputs:
            theme:
                required: false
                type: string
                default: "adeliom"
            php:
                required: false
                type: string
                default: "8.1"
            node:
                required: false
                type: string
                default: "18"
            themes_path:
                required: false
                type: string
                default: "web/app/themes"
            working-directory:
                required: false
                type: string
                default: "."
        secrets:
            GRAVITYFORMS_KEY:
                required: false
            ACF_PRO_KEY:
                required: false

jobs:
    build:
        runs-on: ["self-hosted", "ubuntu"]
        steps:
            # On copie le repo
            - uses: actions/checkout@v3

            # On installe PHP
            - name: Setup PHP
              uses: shivammathur/setup-php@v2
              with:
                  php-version: ${{ inputs.php }}
              env:
                runner: self-hosted

            # On installe les plugins PRO
            - name: Install PRO WP plugins with Hack for OVH
              working-directory: ${{ inputs.working-directory }}
              continue-on-error: true
              run: |
                if test -f "update_deps.php"; then
                  php update_deps.php
                fi

            - name: Composer auth for Gravity Forms
              env:
                KEY: ${{ secrets.GRAVITYFORMS_KEY }}
              if: "${{ env.KEY != '' }}"
              working-directory: ${{ inputs.working-directory }}
              continue-on-error: true
              run: composer config http-basic.gf-composer-proxy.arnaud-ritti.workers.dev licensekey ${{ env.KEY }}

            - name: Composer auth for ACF Pro
              env:
                KEY: ${{ secrets.ACF_PRO_KEY }}
              if: "${{ env.KEY != '' }}"
              working-directory: ${{ inputs.working-directory }}
              continue-on-error: true
              run: composer config http-basic.connect.advancedcustomfields.com ${{ env.KEY }} https://${{ github.event.repository.name }}.local

            - name: Composer auth for ACF Pro - (LEGACY)
              env:
                KEY: ${{ secrets.ACF_PRO_KEY }}
              if: "${{ env.KEY != '' }}"
              working-directory: ${{ inputs.working-directory }}
              continue-on-error: true
              run: composer config http-basic.auth-acf-composer-proxy.pivvenit.net licensekey ${{ env.KEY }}

            # On créé le cache de composer pour prendre moins de temps à build
            - name: Get Composer Cache Directory
              id: composer-cache
              working-directory: ${{ inputs.working-directory }}
              run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

            # On récupère le cache de composer du step précédent
            - uses: actions/cache@v3
              with:
                  path: ${{ steps.composer-cache.outputs.dir }}
                  key: ${{ runner.os }}-composer-${{ inputs.working-directory }}-${{ hashFiles(format('{0}/composer.lock', inputs.working-directory)) }}
                  restore-keys: |
                      ${{ runner.os }}-composer-${{ inputs.working-directory }}-${{ hashFiles(format('{0}/composer.lock', inputs.working-directory)) }}
                      ${{ runner.os }}-composer-${{ inputs.working-directory }}-

            - name: Check Composer lock file is up to date
              working-directory: ${{ inputs.working-directory }}
              run: composer validate --no-check-all

            - name: Install Composer dependencies
              working-directory: ${{ inputs.working-directory }}
              run: composer install --no-progress --prefer-dist --optimize-autoloader

            # On install NodeJS
            - uses: actions/setup-node@v3
              with:
                  node-version: ${{ inputs.node }}
                  cache: npm
                  cache-dependency-path: '${{ inputs.working-directory }}/package-lock.json'

            # On install les dependances Node
            - name: Install NPM dependencies
              working-directory: ${{ inputs.working-directory }}/${{ inputs.themes_path }}/${{ inputs.theme }}
              run: npm ci

            # On joue les tests front
            - name: Run NPM test suite
              working-directory: ${{ inputs.working-directory }}/${{ inputs.themes_path }}/${{ inputs.theme }}
              run: npm run test --if-present

            # On build le front
            - name: Try to build theme's assets
              working-directory: ${{ inputs.working-directory }}/${{ inputs.themes_path }}/${{ inputs.theme }}
              run: npm run build --if-present || npm run build:production --if-present
